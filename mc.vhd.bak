
Library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;
use IEEE.std_logic_unsigned.all;

entity MC is

generic 
	(
		ID		: std_logic_vector (3 downto 0):= "0001";
		BID		: std_logic_vector (3 downto 0):= "0000";
		DELAY		: natural := 8;	-- delay in bits
		CONTROLBUS 	: natural := 576;	-- Control BUS width
		RESERVEDC	: natural := 112;	-- Control BUS Reserved bits 
		SIS 		: natural := 304;	-- Synaptic inputs
		READBACKBUS	: natural := 32;	-- Control BUS width
		RESERVEDR	: natural := 16		
	);

port (	clk		: IN std_logic; -- 100 MHz clock
	reset		: IN std_logic; -- sync clock
	spiIn_ready	: IN std_logic; -- SPI
	spiIn		: IN std_logic_vector (7 downto 0); -- SPI
	--i2cIn_ready	: IN std_logic; -- I2C
	--i2cIn		: IN std_logic_vector (7 downto 0); -- I2C
	sbIn		: IN std_logic_vector (19 downto 0); -- I2C
	spiTX		: IN std_logic;
	spiOut_ready	: OUT std_logic; -- SPI
	spiOut		: OUT std_logic_vector (7 downto 0); -- SPI
	--i2cOut_ready	: OUT std_logic; -- I2C
	--i2cOut		: OUT std_logic_vector (7 downto 0); -- I2C
	sbOut		: OUT std_logic;
	resetTrigger	: OUT std_logic;
	debug		: OUT std_logic_vector(7 downto 0)
	);
end MC;

-- architecture body --
architecture MC_arch of MC is
	component single_clock_ram is
	port (
		clk	: in std_logic;
		raddr	: in std_logic_vector(15 downto 0);
		waddr	: in std_logic_vector(15 downto 0);
		data	: in std_logic_vector(7 downto 0);
		we	: in std_logic := '1';
		q	: out std_logic_vector(7 downto 0)
		);
	end component;

	component MM is
	port (
		clk		: IN std_logic; -- 100 MHz clock
		reset		: IN std_logic; -- sync clock
		runStep		: IN std_logic; -- N/M model
		restoreState	: IN std_logic; -- N/M model
		contBus		: IN std_logic_vector ((CONTROLBUS+RESERVEDC+SIS)-1 downto 0); -- N/M model
		readBckBus	: OUT std_logic_vector ((READBACKBUS+RESERVEDR)-1 downto 0); -- N/M model
		busy		: OUT std_logic -- N/M model
		);
	end component;
	
	signal spiReady		: std_logic :='0';
	signal instruction 	: std_logic_vector(7 downto 0) := (others => '0');
	signal writeOp		: std_logic_vector(95 downto 0) := (others => '0');
	signal protWriteOp	: std_logic_vector(111 downto 0) := (others => '0');
	signal spikeTrain	: std_logic_vector(303 downto 0) := (others => '0');
	signal mapSB		: std_logic_vector(303 downto 0) := (others => '0');
	signal netTopology	: std_logic_vector(303 downto 0) := (others => '0');
	signal err		: std_logic_vector(7 downto 0) := (others => '0');
	signal errFlag		: std_logic :='0';
	signal resetTriggerAux	: std_logic :='0';
	signal restoreStateAux	: std_logic :='0';
	signal confFlag		: std_logic_vector(7 downto 0) := (others => '0');
	signal runStepAux	: std_logic :='0';
	signal writeType	: std_logic :='0';
	signal payload		: natural;
	signal timestamp	: std_logic_vector(63 downto 0) := (others => '0');
	signal contBusAux	: std_logic_vector (CONTROLBUS-1 downto 0); -- N/M model
	signal readBuffer	: std_logic_vector(39 downto 0) := (others => '0');
	signal readFlag		: std_logic :='0';
	signal readOp		: std_logic_vector(63 downto 0) := (others => '0');
	signal readType		: std_logic :='0';
	signal raddr		: std_logic_vector(15 downto 0) := (others => '0');
	signal waddr		: std_logic_vector(15 downto 0) := (others => '0');
	signal data		: std_logic_vector(7 downto 0) := (others => '0');
	signal q		: std_logic_vector(7 downto 0) := (others => '0');
	signal we		: std_logic :='0';
	signal queueProc	: natural :=0;
	signal busyFlag		: std_logic := '0';
	signal forcesFlag		: std_logic := '0';
	signal delayCounter	: natural :=0;
	signal runStep		: std_logic; -- N/M model
	signal restoreState	: std_logic; -- N/M model
	signal contBus		: std_logic_vector ((CONTROLBUS+RESERVEDC+SIS)-1 downto 0); -- N/M model
	signal readBckBus	: std_logic_vector ((READBACKBUS+RESERVEDR)-1 downto 0); -- N/M model
	signal busy		: std_logic; -- N/M model
	
	signal ct: natural :=0;

BEGIN

MEM1 : single_clock_ram
	port map (
			clk => clk,
			raddr => raddr,
			waddr => waddr,
			data => data,
			we => we,
			q => q
		);

muscleModel : MM port map (
			clk => clk,
			reset => reset,
			runStep => runStep,
			restoreState => restoreState,
			contBus => contBus,
			readBckBus => readBckBus,
			busy => busy
		);

wrapper: process(clk, reset, readFlag, readBuffer)
	variable rBuff: std_logic_vector(39 downto 0) := (others => '0');
	begin
	if clk'event and clk='1' then 
		if reset='1' then
			waddr<= (others => '0');
			data<= (others => '0');
			we <='0';
			busyFlag<='0';
			rBuff:= (others => '0');
			ct<=0;
			forcesFlag<= '0';
		else
			if busy='1' and busyFlag='0' then
				busyFlag<='1';
			elsif busy='0' and busyFlag='1' and ct=0 then
				report"Forces event triggered";
				forcesFlag<='1';
				rBuff(31 downto 0):=readBckBus(RESERVEDR+31 downto RESERVEDR);
				rBuff(39 downto 32):="111"&ID&'0';
				busyFlag<='0';
			else
				-- nothing happens
			end if;
			if (readFlag='1' or forcesFlag='1') and ct=0 then
				report"RAM update counter: " & natural'image(ct);
				if readFlag='1' then
					rBuff:=readBuffer;
					report"read event triggered";
					data<=readBuffer (39 downto 32);
					report"RAM values: " & natural'image(to_integer(unsigned(readBuffer (39 downto 32))));
				else
					report"Forces triggered";
					data<=rBuff (39 downto 32);
					report"RAM values: " & natural'image(to_integer(unsigned(rBuff (39 downto 32))));
					forcesFlag<='0';
				end if;
				ct<=ct+1;
				we<='1';
			elsif ct>0 and ct<6 then
				--report"RAM update counter: " & natural'image(ct);
				if to_integer(unsigned(waddr))+1>511 then
					waddr<=(others =>'0');
				else
					waddr<=waddr+1;
				end if;
				if ct < 5 then
					ct<=ct+1;
					data<=rBuff(39 - (ct)*8 downto 32-(ct)*8);
					--report"RAM values: " & natural'image(to_integer(unsigned(rBuff (39 downto 32))));
				else
					report"Read event processed.";
					ct<=0;
					we<='0';
				end if;
			else
				-- nothing happens
			end if;
		end if;
	else
		--nothing happens
	end if;
end process;

dispatcher: process(clk, reset, raddr)
	begin
	if clk'event and clk='1' then 
		if reset='1' then
			raddr<= (others => '0');
			queueProc<=0;
			delayCounter<=0;
			spiOut<=(others =>'0');
			spiOut_ready<='0';
		else
			if raddr<waddr then
				queueProc<= to_integer(unsigned(waddr-raddr));
			elsif raddr>waddr then
				queueProc<= 512-to_integer(unsigned(raddr+waddr));
			else
				queueProc<=0;
			end if;
			
			if raddr+1<512 and raddr/=waddr and delayCounter=0 then
				raddr<=raddr+1;
				delayCounter<=delayCounter+1;
			elsif raddr+1=512 and waddr/=raddr and delayCounter=0 then
				raddr<=(others =>'0');
				delayCounter<=delayCounter+1;
			elsif delayCounter=1 and spiTX='1' then
				spiOut<=q;
				spiOut_ready<='1';
				delayCounter<=delayCounter+1;
			elsif delayCounter=2 then
				spiOut_ready<='0';
				delayCounter<=delayCounter+1;
			elsif delayCounter>2 and delayCounter<delay then
				delayCounter<=delayCounter+1;
			elsif delayCounter=delay then
				delayCounter<=0;
			else
				-- nothing happens
			end if;
		end if;
		debug<=std_logic_vector(to_unsigned(queueProc,8));
	else
		--nothing happens
	end if;
end process;

spiController: process(clk, reset, queueProc)
	variable count 		: natural;
	variable command	: std_logic_vector (2 downto 0);
	variable buf		: std_logic_vector (7 downto 0);
	variable K		: natural;
	variable sbOutAux : std_logic :='0';
	begin
	if clk'event and clk='1' then 
		if reset='1' then
			count:=0;
			instruction<=(others => '0');
			resetTriggerAux	<='0';
			restoreStateAux<='0';
			confFlag<=(others =>'0');
			err<=(others => '0');
			spikeTrain<=(others => '0');
			errFlag<='0';
			runStepAux<='0';
			payload<=0;
			mapSB<=(others => '1');
			buf:=(others => '0');
			netTopology<=(others => '0');
			writeOp<=(others => '0');
			protWriteOp<=(others =>'0');
			writeType<='0';
			readOp<=(others => '0');
			readType<='0';
			contBusAux<=(others => '0');
			readBuffer<=(others =>'0');
			readFlag<='0';
			K:=0;
			sbOutAux:='0';
		else
			
			if spiIn_ready='1' and count=0 then
				command:=spiIn(7 downto 5);
				count:=count+1;
				if spiIn(4 downto 1)=ID or spiIn(4 downto 1)= BID then
					case command is
						when "000" => -- resetFPGA
							report"Reset FPGA command";
							instruction(0)<='1';
							payload<=0;
						when "001" => -- restoreState
							report"Restore state command";
							instruction(1)<='1';
							payload<=0;
						when "010" => -- runStep
							report"Run Step command";
							instruction(2)<='1';
							payload<=38;
						when "100" => -- mapSBInput
							report"Map SB inputs command";
							mapSB<=(others => '1');
							instruction(3)<='1';
							payload<=40;
						when "101" => -- confNetTop
							report"Config Network Topology command";
							instruction(4)<='1';
							payload<=38;
						when "110" => -- write
							report"Write command";
							instruction(5)<='1';
							if spiIn(0)='1' then
								report"Protected write mode selected" severity note;
								writeType<='1';
								payload<=14;
							elsif spiIn(0)='0' then
								report"Normal write mode selected" severity note;
								writeType<='0';
								payload<=12;
								--nothing happens
							else
								 -- nothing happens
							
							end if;
						when "111" => -- read
							report"Read command";
							instruction(6)<='1';
							if spiIn(0)='1' then
								report"Protected read mode selected" severity note;
								readType<='1';
								payload<=0;
							elsif spiIn(0)='0' then
								report"Read selected" severity note;
								readType<='0';
								payload<=8;
							else
								-- nothing happens
							end if;
						when others => -- sendSpike 
							report"Send Spike";
							instruction(7)<='1';
							payload<=0;
					end case;
				else
					report"COMMAND ignored wrong ID" severity warning;
				end if;
			elsif spiIn_ready='1' and count>0 and payload >0 then
				payload<=payload-1;
				if instruction(2)='1' then
					report"Updating spikeTrain " & natural'image(payload) & ", value: " & natural'image(to_integer(unsigned(spiIn)));
					spikeTrain((payload*8-1) downto (payload*8-8))<=spiIn;
				elsif instruction(3)='1' then
					report"Map SBs " & natural'image(payload);
					if (payload mod 2) = 0 then
						buf(7 downto 0):=spiIn;
					else
						if to_integer(unsigned(buf & spiIn))<303 then
							mapSB(to_integer(unsigned(buf & spiIn)))<='0';
							report"Updating mask bit " & natural'image(to_integer(unsigned(buf & spiIn)));
						elsif buf & spiIn=x"FFFF" then
							report"SB input ignored" severity warning;
						else
							report"Error the neuron ID must be below 303" severity warning;
							errFlag<='1';
							err<=x"02"; -- Error the neuron ID must be below 303
						end if;
					end if;
						
				elsif instruction(4)='1' then
					report"Config Network " & natural'image(payload);
					netTopology((payload*8-1) downto (payload*8-8))<=spiIn;
				
				elsif instruction(5)='1' then
					report"Write operation " & natural'image(payload);
					if writeType='0' then
						writeOp((payload*8-1) downto (payload*8-8))<=spiIn;
					else
						protWriteOp((payload*8-1) downto (payload*8-8))<=spiIn;
					end if;
				
				elsif instruction(6)='1' then
					if readType='0' then
						report" Read command " & natural'image(payload);
						readOp((payload*8-1) downto (payload*8-8))<=spiIn;
					else
						-- nothing happens
					end if;
				else
					-- generate error!
				end if;
			elsif count>0 and payload=0 then
				if instruction(0)='1' then
					report"A reset command was received";
				elsif instruction(1)='1' then
					if confFlag(4 downto 1)="1111" then
						confFlag(0)<='1';
						restoreStateAux<='1';
						confFlag(5)<='1';
						report"A restore state command was processed";
					else
						report"Error cannot restore a state before configuring" severity warning;
						errFlag<='1';
						err<=x"01"; -- Error cannot restore a state before configuring
					end if;
				elsif instruction(2)='1' and queueProc<490 then
					if confFlag(5 downto 1)="11111" then
						for I in 0 to 303 loop
							if netTopology(I)='1' then
								if mapSB(I) ='0' and netTopology(I)='1' then
									report"Updating bit " & natural'image(I) &" with signal " & natural'image(K);
									spikeTrain(I)<=sbIn(K);
									K:=K+1;
								elsif mapSB(I) ='1' and netTopology(I)='0' then
									report"Reseting bit " & natural'image(I) &"!";
									spikeTrain(I)<='0';
								else
									-- nothing happens
								end if;
							else
								-- nothing happens
							end if;
						end loop;
						K:=0;
						runStepAux<='1';
						timestamp<=timestamp+1;
						sbOutAux:='0';
						report"A run step command was processed";
					else
						report"ERROR a run step can only be processed after configuring the simulation" severity warning;
						errFlag<='1';
						err<=x"03"; -- Error a run step can only be processed after configuring the simulation
					end if;
				elsif instruction(3)='1' then
					confFlag(1)<='1';
					report"A map SBs command has been received";
				elsif instruction(4)='1' then
					confFlag(2)<='1';
					report"A Config Network Topology command has been received";
				elsif instruction(5)='1' then
					if writeType='1' then
						report"A protected write command has been processed";
						timestamp<=protWriteOp(111 downto 48);
						contBus(SIS+RESERVEDC-1 downto SIS)<=protWriteOp;
						confFlag(3)<='1';
						writeType<='0';
					else
						--Item input BUS address LSB: XX-XX-XX-XX //size of 32 bits
						--Item input BUS address MSB: XX-XX-XX-XX //size of 32 bits
						report "MSB: " & natural'image(to_integer(unsigned(writeOp(63 downto 32)))) & ", LSB: " & natural'image(to_integer(unsigned(writeOp(95 downto 64))));
						if to_integer(unsigned(writeOp(63 downto 32)))<CONTROLBUS and to_integer(unsigned(writeOp(95 downto 64)))<CONTROLBUS then
							if (to_integer(unsigned(writeOp(63 downto 32)))>to_integer(unsigned(writeOp(95 downto 64)))) then
								if (to_integer(unsigned(writeOp(63 downto 32)))-to_integer(unsigned(writeOp(95 downto 64))))=7 then
									contBusAux(to_integer(unsigned(writeOp(63 downto 32))) downto to_integer(unsigned(writeOp(95 downto 64))))<= writeOp (7 downto 0);
									report"A 8 bits write command has been processed";
									confFlag(4)<='1';
								elsif (to_integer(unsigned(writeOp(63 downto 32)))-to_integer(unsigned(writeOp(95 downto 64))))=15 then
									contBusAux(to_integer(unsigned(writeOp(63 downto 32))) downto to_integer(unsigned(writeOp(95 downto 64))))<= writeOp (15 downto 0);
									report"A 16 bits write command has been processed";
									confFlag(4)<='1';
								elsif (to_integer(unsigned(writeOp(63 downto 32)))-to_integer(unsigned(writeOp(95 downto 64))))=23 then
									contBusAux(to_integer(unsigned(writeOp(63 downto 32))) downto to_integer(unsigned(writeOp(95 downto 64))))<= writeOp (23 downto 0);
									report"A 24 bitw write command has been processed";
									confFlag(4)<='1';
								elsif (to_integer(unsigned(writeOp(63 downto 32)))-to_integer(unsigned(writeOp(95 downto 64))))=31 then
									contBusAux(to_integer(unsigned(writeOp(63 downto 32))) downto to_integer(unsigned(writeOp(95 downto 64))))<= writeOp (31 downto 0);
									report"A 32 bits write command has been processed";
									confFlag(4)<='1';
								else
									report"Error incorrect data size" severity warning;
									errFlag<='1';
									err<=x"04"; -- Error incorrect data size
								end if;
							else
								report"Error MSB address must be higher than the LSB address" severity warning;
								errFlag<='1';
								err<=x"08"; -- Error MSB address must be higher than the LSB address
							end if;
						else
							report"ERROR invalid address" severity warning;
							errFlag<='1';
							err<=x"09"; -- Error invalid address
						end if;
						
					end if;
				elsif instruction(6)='1' then
					if readType='1' then
						report"A protected read command has been processed";
						readFlag<='1';
						readBuffer(15 downto 0)<=readBckBus(RESERVEDR-1 downto 0);
						readBuffer(31 downto 16)<= (others =>'0');
						readBuffer(39 downto 32)<= "111"&ID&'1';
					else
					--Item input BUS address LSB: XX-XX-XX-XX //size of 32 bits
					--Item input BUS address MSB: XX-XX-XX-XX //size of 32 bits
						if to_integer(unsigned(readOp(63 downto 32)))<READBACKBUS and to_integer(unsigned(readOp(31 downto 0)))<READBACKBUS then
							if (to_integer(unsigned(readOp(31 downto 0)))>to_integer(unsigned(readOp(63 downto 32)))) then
								if (to_integer(unsigned(readOp(31 downto 0)))-to_integer(unsigned(readOp(63 downto 32))))=7 then
									readBuffer(7 downto 0)<=readBckBus(RESERVEDR+to_integer(unsigned(readOp(31 downto 0))) downto RESERVEDR+to_integer(unsigned(readOp(63 downto 32))));
									readBuffer(31 downto 8)<= (others =>'0');
									readBuffer(39 downto 32)<= "111"&ID&'0';
									readFlag<='1';
									report"A read command has been processed. Reading 8 bits. Value :" & natural'image(to_integer(unsigned(readBckBus(to_integer(unsigned(readOp(31 downto 0))) downto to_integer(unsigned(readOp(63 downto 32)))))));
								elsif (to_integer(unsigned(readOp(31 downto 0)))-to_integer(unsigned(readOp(63 downto 32))))=15 then
									readBuffer(15 downto 0)<=readBckBus(RESERVEDR+to_integer(unsigned(readOp(31 downto 0))) downto RESERVEDR+to_integer(unsigned(readOp(63 downto 32))));
									readBuffer(31 downto 16)<= (others =>'0');
									readBuffer(39 downto 32)<= "111"&ID&'0';
									readFlag<='1';
									report"A read command has been processed. Reading 16 bits. Value :" & natural'image(to_integer(unsigned(readBckBus(to_integer(unsigned(readOp(31 downto 0))) downto to_integer(unsigned(readOp(63 downto 32)))))));
								elsif (to_integer(unsigned(readOp(31 downto 0)))-to_integer(unsigned(readOp(63 downto 32))))=23 then
									readBuffer(23 downto 0)<=readBckBus(RESERVEDR+to_integer(unsigned(readOp(31 downto 0))) downto RESERVEDR+to_integer(unsigned(readOp(63 downto 32))));
									readBuffer(31 downto 24)<= (others =>'0');
									readBuffer(39 downto 32)<= "111"&ID&'0';
									readFlag<='1';
									report"A read command has been processed. Reading 24 bits. Value :" & natural'image(to_integer(unsigned(readBckBus(to_integer(unsigned(readOp(31 downto 0))) downto to_integer(unsigned(readOp(63 downto 32)))))));
								elsif (to_integer(unsigned(readOp(31 downto 0)))-to_integer(unsigned(readOp(63 downto 32))))=31 then
									readBuffer(31 downto 0)<=readBckBus(RESERVEDR+to_integer(unsigned(readOp(31 downto 0))) downto RESERVEDR+to_integer(unsigned(readOp(63 downto 32))));
									readBuffer(39 downto 32)<= "111"&ID&'0';
									readFlag<='1';
									report"A read command has been processed. Reading 32 bits. Value :" & natural'image(to_integer(unsigned(readBckBus(to_integer(unsigned(readOp(31 downto 0))) downto to_integer(unsigned(readOp(63 downto 32)))))));
								else
									report"Error incorrect data size" severity warning;
									errFlag<='1';
									err<=x"04"; -- Error incorrect data size
								end if;
							else
								report"ERROR invalid address" severity warning;
								errFlag<='1';
								err<=x"09"; -- Error invalid address
							end if;
						else
							report"Error MSB address must be higher than the LSB address" severity warning;
							errFlag<='1';
							err<=x"08"; -- Error MSB address must be higher than the LSB address
						end if;
					end if;
				elsif instruction(7)='1' then
					report"Error cannot receive a sendSpike command from the MCS" severity warning;
					errFlag<='1';
					err<=x"FF"; -- Error cannot receive a sendSpike command from the MCS
				else
					-- last state
				end if;
				instruction<=(others =>'0');
				count:=0;
			else
				-- TO DO
			end if;
			if resetTriggerAux='1' then
				resetTriggerAux<='0';
			else
				-- nothing happens
			end if;
			if restoreStateAux='1' then
				restoreStateAux<='0';
			else
				-- nothing happens
			end if;
			if runStepAux='1' then
				runStepAux<='0';
			else
				--nothing happens
			end if;
			if readFlag='1' then
				readFlag<='0';
			else
				--nothing happens
			end if;
		end if;
		restoreState<=restoreStateAux;
		resetTrigger<=resetTriggerAux;
		runStep<=runStepAux;
		contBus(SIS-1 downto 0)<=spikeTrain;
		contBus(SIS+111 downto SIS+48)<=timestamp;
		contBus(RESERVEDC+SIS-1 downto SIS+64)<=protWriteOp(111 downto 64);
		contBus(CONTROLBUS+RESERVEDC+SIS-1 downto RESERVEDC+SIS)<=contBusAux;
		sbOut<=sbOutAux;
		--contBus((RESERVEDC+5*SIS)-1 downto RESERVEDC+4*SIS)<=netTopology; -- testbench
		--contBus((RESERVEDC+6*SIS)-1 downto (RESERVEDC+5*SIS))<=mapSB; --testbench
		--debug<=err;
	else
		--nothing happens
	end if;
end process;
end MC_arch;
